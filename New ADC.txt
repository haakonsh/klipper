New AVR ADC API that supports differential inputs


Problem:
The default thermistor sampling circuit in the Einsy Rambo(Prusa MK3*) control board is poorly designed, and a possible improvement utilizing a differential input ADC channel cannot be implemented using the current ADC API.

Current ADC API defines 16 single-ended and no differential input channels. Where Atmega2560(Einsy Rambo) supports 18 single-ended and 22 differential input channels[Table 26-4 Input Channel Selections in Atmega2560 datasheet]. 

Current ADC API defines 16 ADC channels where each channel is referenced via the following struct:

struct gpio_adc {
    uint8_t chan;
};

and where each channel is mapped to a physical pin by the index of the following struct:

static const uint8_t adc_pins[] PROGMEM = {
...
    GPIO('F', 0), GPIO('F', 1), GPIO('F', 2), GPIO('F', 3),
    GPIO('F', 4), GPIO('F', 5), GPIO('F', 6), GPIO('F', 7),
    GPIO('K', 0), GPIO('K', 1), GPIO('K', 2), GPIO('K', 3),
    GPIO('K', 4), GPIO('K', 5), GPIO('K', 6), GPIO('K', 7),
...
};

The Atmega2560 registers ADMUX and ADCSRB controls the ADC input selection through the MUX0:5 bits, where ADMUX contains the MUX0:4 bits and ADCSRB contain the MUX5 bit. MUX0:2 represent analog input pin 0-7 and MUX5 represents whether the analog input pins of port F or K is used.

uint32_t
gpio_adc_sample(struct gpio_adc g)
{
...
    // Set the channel to sample
#if defined(ADCSRB) && defined(MUX5)
    // The MUX5 bit of ADCSRB selects whether we're reading from
    // channels 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
    ADCSRB = ((g.chan >> 3) & 0x01) << MUX5;
#endif
    ADMUX = ADMUX_DEFAULT | (g.chan & 0x07);
...
}

In gpio_adc_sample() hardcodes whether port K or F is used based on a configuration flag. This drops the amount of ADC channels down to 8.

I need an ADC API that can represent all of the given AVR's ADC channels rather than an arbitrary sub-set.

Solution:
An ADC channel is mapped directly to the AVR's MUX bits:

struct gpio_adc {
    uint8_t adcsra;
    uint8_t adcsrb;
    uint8_t admux;
    uint8_t didr0;
    uint8_t didr2;
};

TODO: Done!
    Check out PrinterBoardAliases and how it parses pin aliases.
        The pin/admux parameter in config_analog_in("oid=%c admux=%u", ...) needs to be parsed as %u on MCU side,
        and %s on python host side. Somehow the python scripts turns a string into a uint8_t.

TODO: Done!
    Override printer.config:205 with e_sensor_pin currently defined at printer_data/config/RatOS/boards/prusa-einsy/config.cfg:15. 
    For some reason I can't override pin aliases when I override the pin alias e_sensor_pin in printer.cfg,
    I get a type error from the host.
        [extruder]
        sensor_pin: 9
        sensor_type: ATC Semitec 104GT-2

        [heater_bed]
        sensor_type: EPCOS 100K B57560G104F
        sensor_pin: 2

TODO:
    Verify ADC values. For some reason the bed thermistor report negative ADC codes, and they are out of range of a single-channel ADC.

TODO:
    Find the definitions of ADC min and max values given by the MCU command query_analog_in of adccmds.c:100
        It seems to be given by the constant ADC_MAX decleared in adc.c, multiplied by the oversample factor,
        then multiplied by a the floats passed into setup_minmax(minval, maxval, ...) (mcu.py:505).

        I don't know who passes these arguments yet.


TODO: 
    The MCU's ADC min/max values are defined universally for all channels. This is a problem when ADC channels have a different ranges.
    Typical use-case is when both single-ended and differential channels are in use. I suggest to use unique min/max definitions
    for each enabled channel.

**********************************************************************************************************************************************
11.10.2023
**********************************************************************************************************************************************
At this point I'm giving up this half-assed approach of hacking the MCU_adc class of mcu.py. The abstractions are too messy to interface with.
I'm switching to a custom temperature sensor implemented according to extras/adc_temperature.py. These abstractions and API's seem to be more 
minimalistic and on-point than mcu.py(insert cursewords here...).
**********************************************************************************************************************************************

TODO:
    Explain the dataflow from klippy.py:main() until my_sensor's has been intitialized:

1.  klippy.py:298 main() parses input arguments that is called with "klippy.py" from a script or cmd line terminal.

2.  klippy.py:390 main() Printer object is created/initialized with; 'main_reactor', a thread-like event-driven framework based on greenlet,
    , 'bglogger', what I think is a background logger, and 'start_args', input arguments.

3.  klippy.py:50 Printer object registers the callback '_connect' with main_reactor. Initializes 'objects' as an ordered dictionary (order
    of insertion is static). Inits Gcode interface (to MCU) and webhooks (to external tools like mainsail/moonraker, octopi, etc).

4.  klippy.py:391 main() calls printer.run.

5.  klippy.py:210 Printer.run() captures the local system time with a call to time.time() (returns a float of current systime).
    main 'reactor' is started. 

6.  klippy.py:173 Printer._connect() callback registerd with the main Reactor gets called (invoked?) from somewhere. I suspect klipperscreen/mainsail via 
    webhooks or something. _connected() calls Printer._read_config() and calls all 'klippy:connect' event handlers registered with 
    Printer.register_event_handler().

7.  klippy.py:138 Printer._read_config() inits the MCU object via mcu.add_printer_object().

8.  mcu.py:583 MCU object initializes the mcu communication interface, and registers its event handlers in the main Printer object.
    Among these the '_connect()' event handler is of particular interest.

9.  mcu.py:775 MCU._connect() request MCU's current config, and sends current config if mcu is unconfigured. At this point the MCU object must
    have had its _config_callbacks registered, so when are they registered?

    Most "modules" use the function MCU.setup_pin() to create an MCU subclass of _adc, _pwm, or _digital_out, based on pin_type. 
    These subclasses will call MCU.register_config_callback() in their __init__() function. This callback is responsible for calling 
    MCU.create_oid(), MCU.add_config_cmd(), MCU.get_query_slot() (synchronization object?), and MCU.register_response()(wrapper for 
    Printer._serial.register_response()). 

    Why are gpios used as abstractions for circuits that are far more complex than what a single gpio can represent.
    And why use this broken abstraction as a core program state when initializing the MCU? 
    If I need to init a gpio as part of a device's init that's a valid program state, but the converse is not true.

10. I think at this we have completed the tasks required bystep 7 and 9. The MCU should now be ready for the regular printer commands
    issued by the Klippy-host.


This is valid for MCU_adc and similar classes, but there's still some questions. Like what are sensor factories? And are 'heaters' used?
    
    sensor_factories is the name of a dictionary that holds all sensors that a given PrinterHeater instance contains. 
    sensor_factories is used to create a Heater object who in turn will setup a sensor from sensor_factories if it is of the correct 
    sensor type. Why is a PrinterHeaters object used to hold a dict of sensors? Or rather, why not use a 'sensor_factories' dict
    in the main MCU class to hold all sensor types available to the MCU? Why leave it up to the various sub-systems to hold unique
    and local sensor_factories?

1.  PrinterHeaters.setup_heater() calls PrinterHeaters.setup_sensor(), PrinterHeaters.register_sensor() and creats a Heater object
    with the given sensor. The Heater class defines the sensor API (finnaly!).

    When is PrinterHeaters.setup_heater() called?

2.  extras/heater_bed.py:27 PrinterHeaterBed is created by a load_config(). 
    Where PrinterHeaterBed calls PrinterHeaters.setup_heater(). 
    
    Similarly extruder.py:331 add_printer_objects() creates a PrinterExtruder object who also calls 
    PrinterHeaters.setup_heater(). toolhead.py:605 add_printer_objects() calls kinematics/extruder.py's add_printer_objects().
    And toolhead.add_printer_objects() is called by klippy.py:142 Printer._read_config().

Do I need to use both MCU.register_config_callback(PrinterADCtoTemperatureAVR._build_config) and 
 PrinterHeaters.add_sensor_factory(PrinterADCtoTemperatureAVR.name, PrinterADCtoTemperatureAVR.create) ?
 - Yes, the PrinterHeaters.add_sensor_factory() adds our BedTempMK3S and PT1000_WheatStone classes to a list of available sensors 
    that can be referenced from the sensor type name, bed_temp and hotend_temp. These sensor types can now be instantiated if needed.
    The _build_config callback allows the PrinterHeaters objects to intitialize the sensor objects with configs that are set in the
    PrinterHeaters's own config sections (not accessable by the sensors otherwise) before we create the MCU commands. One example where
    this is useful is when setting a sensor's minimum and maximum temperatures, who in turn passes these limits to the physical MCU
    who will then enter a shutdown state if these temperatures are exceeded.(temp limits have basic low-pass filter)


19.10.2023: Why the fuck are they using variable length data types embedded in strings, on an 8-bit AVR? Python already supports binary data types...

19.10.2023: diff inputs are not sampling, I suspect the unchecked 125Âµs settling delay is ignored by the other ADC channel.

20.10.2023 Rewrote the ADC driver. First conversion is not done when read the ADC!

20.10.2023 Got temperatures. Needs some tweaking, but it seems legit.

22.10.2023 ADC Measurements

PT1000 ref resistor = 1748 Ohm, 1.353V. 4.98V-1.353V = 3.627V ==> Ref pullup = 4685.9 Ohm
PT1000 at 0.937V, 
4.7k test resistor = 4.53k Ohm 


ADC0 4.53kOhm test resistor at 0501.2  ADC codes = 2.4399V ==> 4716.03 Ohm pullup, 2.4511V Multimeter ==> 4673.79 Ohm
ADC0 'open'   test resistor at 1022.35 ADC codes = 4.977V, 4.98V Multimeter
ADC0 'closed' test resistor at 0.0     ADC codes = 0.0V, 0.0V Multimeter
ADC0 1748 Ohm test resistor at 275.6   ADC codes = 1.3416V ==> 4740.55 Ohm pullup, 1.3542V Multimeter ==> 4680.18 Ohm


ADC1 4.53kOhm test resistor at 0501.1  ADC codes = 2.4394V ==> 4717.93 Ohm pullup, 2.4515V Multimeter ==> 4672.28 Ohm
ADC1 'open'   test resistor at 1022.7  ADC codes = 4.979V, 4.98V Multimeter
ADC1 'closed' test resistor at 0.0     ADC codes = 0.0V, 0.0V Multimeter
ADC1 1748 Ohm test resistor at 275.75  ADC codes = 1.3424V ==> 4736.68 Ohm pullup, 1.3550V Multimeter ==> 4676.38 Ohm

ADC2 4.53kOhm test resistor at 0501.7  ADC codes = 2.4423V ==> 4706.85 Ohm pullup, 2.453V Multimeter ==> 4666.66 Ohm
ADC2 'open'   test resistor at 1022.7  ADC codes = 4.979V, 4.98V Multimeter
ADC2 'closed' test resistor at 0.0     ADC codes = 0.0V, 0.0V Multimeter
ADC2 1748 Ohm test resistor at 276.20  ADC codes = 1.3446V ==> 4726.07 Ohm pullup, 1.3560V Multimeter ==> 4671.65 Ohm



TODO: run single-ended offset calibration by using the GND and Vref channels

23.10.2023:
	    Ir [ÂµA]	    Vref [mV]	R [Ohm]
ADC2	1054	    4979	    4722.9
ADC1	1052.3	    4979	    4730.5
ADC0	1051.9	    4979	    4732.3



